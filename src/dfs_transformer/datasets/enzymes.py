#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Mon Aug 23 15:27:25 2021

@author: chrisw
"""
from torch.utils.data import Dataset
from torch_geometric.data import Data
import torch
import torch.nn as nn
import torch.nn.functional as F
import numpy as np
import pickle

AMINO_ACIDS = [
    'ALA', 'CYS', 'ASP', 'GLU', 'PHE', 'GLY', 'HIS', 'ILE', 'LYS', 'LEU', 'MET',
    'ASN', 'PYL', 'PRO', 'GLN', 'ARG', 'SER', 'THR', 'SEC', 'VAL', 'TRP', 'TYR',
    'unk'
]

SECONDARY_STRUCTS = ['H', 'G', 'I', 'E', 'B', 'T', 'C', 'unk']

labels2idx = {"4.2.1.10": 0, "6.5.1.1": 1, "4.2.3.1": 2, "2.7.7.48": 3, "3.1.3.25": 4, "3.1.21.4": 5, "3.2.1.23": 6, "6.3.5.3": 7, "4.2.1.20": 8, "3.4.11.18": 9, "6.3.4.18": 10, "3.1.22.4": 11, "2.3.1.87": 12, "2.7.7.3": 13, "3.2.1.4": 14, "2.7.1.2": 15, "3.1.2.2": 16, "7.1.2.2": 17, "2.7.11.12": 18, "3.2.1.3": 19, "1.14.14.18": 20, "4.1.1.20": 21, "2.8.1.12": 22, "3.5.2.6": 23, "4.6.1.2": 24, "6.1.1.3": 25, "1.14.16.1": 26, "2.1.1.220": 27, "2.7.7.60": 28, "3.4.21.92": 29, "1.1.1.100": 30, "4.2.1.84": 31, "2.8.1.7": 32, "5.6.1.1": 33, "4.2.2.2": 34, "2.4.1.18": 35, "3.4.22.60": 36, "3.6.1.7": 37, "6.3.4.4": 38, "6.1.1.19": 39, "1.12.99.6": 40, "4.2.99.18": 41, "3.2.1.1": 42, "6.1.1.15": 43, "1.14.13.225": 44, "3.2.1.37": 45, "5.3.1.23": 46, "3.2.2.27": 47, "2.7.7.6": 48, "1.18.6.1": 49, "6.1.1.20": 50, "3.4.21.107": 51, "3.4.21.90": 52, "1.11.1.7": 53, "3.5.2.3": 54, "4.6.1.18": 55, "2.7.1.39": 56, "7.2.1.1": 57, "2.7.4.22": 58, "3.2.1.41": 59, "2.5.1.19": 60, "3.5.4.16": 61, "2.5.1.18": 62, "2.7.1.33": 63, "2.7.4.8": 64, "4.1.1.23": 65, "1.3.1.98": 66, "2.4.2.10": 67, "1.1.1.1": 68, "2.3.1.57": 69, "2.5.1.47": 70, "2.4.2.19": 71, "4.6.1.19": 72, "2.7.11.30": 73, "2.7.1.15": 74, "2.3.3.8": 75, "2.7.11.13": 76, "3.4.21.104": 77, "2.7.7.9": 78, "5.6.2.1": 79, "4.1.1.48": 80, "2.4.2.17": 81, "1.3.5.2": 82, "2.7.4.6": 83, "3.1.3.48": 84, "2.3.1.48": 85, "1.1.1.2": 86, "2.7.11.22": 87, "4.2.1.22": 88, "5.3.4.1": 89, "3.5.1.2": 90, "5.6.2.2": 91, "6.1.1.1": 92, "7.1.1.1": 93, "3.1.3.7": 94, "4.2.1.96": 95, "4.1.1.11": 96, "2.7.2.4": 97, "3.6.1.34": 98, "2.4.1.1": 99, "1.12.7.2": 100, "1.7.1.17": 101, "3.2.1.78": 102, "3.8.1.2": 103, "2.6.1.52": 104, "3.1.1.96": 105, "2.7.7.18": 106, "6.1.1.7": 107, "2.5.1.15": 108, "2.1.2.2": 109, "2.3.1.81": 110, "3.2.1.20": 111, "2.1.1.148": 112, "3.4.11.2": 113, "6.3.2.19": 114, "3.2.1.55": 115, "4.1.3.3": 116, "2.1.1.63": 117, "3.1.3.16": 118, "3.4.24.69": 119, "1.1.1.184": 120, "2.3.2.5": 121, "4.4.1.5": 122, "6.1.1.17": 123, "1.2.1.11": 124, "4.1.1.15": 125, "2.7.8.7": 126, "2.1.1.228": 127, "2.7.7.65": 128, "2.7.7.n1": 129, "5.1.3.13": 130, "3.4.11.1": 131, "4.1.3.27": 132, "2.5.1.10": 133, "1.1.1.267": 134, "3.8.1.5": 135, "3.2.1.18": 136, "3.4.21.21": 137, "3.2.1.21": 138, "3.1.4.53": 139, "1.1.1.169": 140, "3.6.1.1": 141, "4.1.1.50": 142, "1.3.1.9": 143, "6.1.1.2": 144, "3.5.3.1": 145, "3.2.1.81": 146, "4.1.1.39": 147, "7.2.2.10": 148, "3.6.4.6": 149, "3.1.3.45": 150, "3.6.1.32": 151, "7.1.1.8": 152, "3.6.5.2": 153, "3.5.4.4": 154, "2.3.2.23": 155, "2.7.1.71": 156, "3.6.3.14": 157, "2.6.1.1": 158, "3.4.21.41": 159, "4.1.1.19": 160, "2.4.2.18": 161, "1.15.1.1": 162, "6.1.1.12": 163, "2.7.11.25": 164, "4.3.3.7": 165, "1.5.1.3": 166, "6.1.1.4": 167, "3.6.1.13": 168, "2.7.2.1": 169, "4.1.2.25": 170, "4.6.1.16": 171, "2.1.1.13": 172, "2.7.4.9": 173, "4.1.2.13": 174, "3.1.1.4": 175, "3.2.1.52": 176, "1.1.1.3": 177, "4.2.1.1": 178, "3.4.17.19": 179, "2.3.2.26": 180, "3.2.1.24": 181, "3.5.2.17": 182, "4.1.1.33": 183, "3.1.21.2": 184, "3.1.3.11": 185, "5.1.1.1": 186, "3.1.4.17": 187, "4.3.2.2": 188, "5.3.3.2": 189, "3.4.25.1": 190, "3.2.1.22": 191, "3.2.1.73": 192, "1.14.13.25": 193, "2.3.1.129": 194, "2.3.2.27": 195, "7.1.1.2": 196, "2.1.1.37": 197, "3.2.1.8": 198, "1.10.3.1": 199, "5.4.99.25": 200, "1.9.3.1": 201, "3.2.1.169": 202, "1.1.1.103": 203, "4.2.1.17": 204, "3.4.22.15": 205, "6.5.1.3": 206, "3.1.4.11": 207, "3.4.21.4": 208, "2.3.1.9": 209, "3.1.13.4": 210, "1.6.5.2": 211, "2.3.1.180": 212, "3.4.16.4": 213, "2.1.1.193": 214, "2.7.10.1": 215, "4.6.1.1": 216, "2.7.7.4": 217, "2.5.1.78": 218, "3.4.21.22": 219, "6.3.2.3": 220, "3.2.2.1": 221, "2.7.2.3": 222, "3.4.21.89": 223, "6.3.2.4": 224, "3.2.2.22": 225, "5.3.1.1": 226, "2.7.4.3": 227, "2.7.12.1": 228, "1.5.1.2": 229, "3.2.1.31": 230, "3.4.21.53": 231, "3.5.4.5": 232, "2.7.13.3": 233, "6.1.1.21": 234, "1.1.1.205": 235, "4.1.2.4": 236, "6.3.2.6": 237, "2.1.1.45": 238, "3.1.1.3": 239, "3.4.22.56": 240, "2.7.1.23": 241, "1.14.13.39": 242, "3.6.4.12": 243, "3.2.1.14": 244, "3.5.1.28": 245, "6.3.4.21": 246, "2.7.7.49": 247, "3.1.3.18": 248, "1.10.3.2": 249, "1.1.1.35": 250, "2.1.3.2": 251, "4.1.99.3": 252, "1.3.5.1": 253, "2.7.11.17": 254, "2.7.11.24": 255, "2.3.1.41": 256, "3.2.1.113": 257, "2.3.2.31": 258, "2.3.1.5": 259, "5.1.1.3": 260, "1.13.11.24": 261, "1.14.18.1": 262, "1.8.4.11": 263, "2.8.1.1": 264, "6.1.1.6": 265, "3.1.27.3": 266, "2.7.7.19": 267, "1.1.1.27": 268, "1.7.2.1": 269, "2.1.1.182": 270, "3.4.19.12": 271, "2.1.1.77": 272, "2.3.3.10": 273, "2.7.1.1": 274, "3.1.1.1": 275, "2.7.1.4": 276, "5.3.1.6": 277, "2.7.1.11": 278, "1.2.4.4": 279, "1.8.4.8": 280, "1.6.99.1": 281, "3.1.26.5": 282, "1.8.1.4": 283, "2.4.1.15": 284, "1.8.1.7": 285, "2.2.1.6": 286, "3.1.3.8": 287, "6.3.5.2": 288, "2.7.2.8": 289, "4.2.1.52": 290, "3.5.2.9": 291, "1.11.1.10": 292, "3.1.1.72": 293, "2.7.6.1": 294, "2.7.1.20": 295, "6.1.1.10": 296, "2.4.2.7": 297, "3.5.1.11": 298, "1.8.1.9": 299, "3.1.26.4": 300, "1.17.4.1": 301, "1.3.7.7": 302, "2.1.1.354": 303, "3.1.1.31": 304, "1.1.1.25": 305, "3.6.5.5": 306, "4.2.1.113": 307, "1.1.1.37": 308, "2.6.1.9": 309, "1.16.3.1": 310, "3.2.2.9": 311, "3.1.26.3": 312, "6.2.1.5": 313, "2.7.1.107": 314, "2.4.2.9": 315, "2.3.3.13": 316, "7.2.2.8": 317, "3.5.1.5": 318, "2.7.12.2": 319, "2.7.1.21": 320, "2.7.10.2": 321, "2.5.1.17": 322, "2.4.2.1": 323, "2.1.2.10": 324, "5.2.1.8": 325, "2.7.1.24": 326, "2.6.1.42": 327, "1.4.3.5": 328, "2.5.1.16": 329, "5.4.99.5": 330, "1.18.1.2": 331, "2.4.2.30": 332, "2.3.2.13": 333, "3.1.1.29": 334, "3.4.21.42": 335, "3.2.1.96": 336, "2.7.7.7": 337, "3.5.1.98": 338, "2.4.1.25": 339, "4.6.1.12": 340, "4.2.1.59": 341, "1.14.14.1": 342, "1.11.1.6": 343, "3.1.3.3": 344, "3.2.1.26": 345, "2.7.1.35": 346, "6.3.2.1": 347, "3.4.13.9": 348, "5.1.3.2": 349, "3.4.21.5": 350, "3.2.1.17": 351, "2.7.1.40": 352, "3.6.4.13": 353, "1.8.3.2": 354, "1.17.1.8": 355, "3.1.3.1": 356, "2.7.11.1": 357, "3.1.3.5": 358, "2.3.1.286": 359, "2.1.1.72": 360, "2.4.2.8": 361, "3.6.1.9": 362, "6.3.1.20": 363, "2.1.3.3": 364, "3.5.1.88": 365, "3.6.1.3": 366, "3.4.21.6": 367, "3.1.11.2": 368, "1.11.1.15": 369, "1.11.1.9": 370, "3.2.1.39": 371, "3.6.1.23": 372, "2.3.1.39": 373, "6.1.1.11": 374, "2.7.1.69": 375, "3.1.3.2": 376, "2.3.1.12": 377, "3.1.4.35": 378, "1.16.3.2": 379, "1.2.1.3": 380, "3.2.1.91": 381, "3.5.1.1": 382, "2.7.7.8": 383}


class Enzymes(Dataset):
    def __init__(self, path="/mnt/ssd/datasets/enzyme/restrictive_n200_dleq4.5.pkl", 
                 n_edge_types=8, n_node_types=len(AMINO_ACIDS), node_types_key='node_types',
                 edge_types_key='edge_types'):
        # default edge types:
        # 0: <4
        # 1: <5
        # 2: <6
        # 3: <7
        # 4: <8
        # 5: <9
        # 6: <10
        # 7: others
        self.path = path
        self.n_edge_types = n_edge_types
        self.n_node_types = n_node_types 
        self.node_types_key = node_types_key
        self.edge_types_key = edge_types_key 
        self.data = []
        self.graphs = None
        self.keys = None
        self.prepare()
  
    
    def prepare(self):
        with open(self.path, 'rb') as f:
            self.graphs = pickle.load(f)
        self.keys = list(self.graphs.keys())
            
            
    def __len__(self):
        return len(self.data)
  
    def __getitem__(self, idx):
        name = self.keys[idx]
        d = self.graphs[name]
        if 'node_features' not in d:
            node_features = F.one_hot(torch.tensor(d[self.node_types_key], dtype=torch.long), 
                                      num_classes=self.n_node_types).float()
        else:
            node_features = torch.tensor(d['node_features']).float()
        
        if 'edge_features' not in d:
            edge_features = F.one_hot(torch.tensor(d[self.edge_types_key], dtype=torch.long), 
                                      num_classes=self.n_edge_types).float()
        else:
            edge_features = torch.tensor(d['edge_features']).float()
        if 'min_dfs_code' in d:
            return Data(name=name, 
                               edge_index=torch.tensor(d['edge_index']),
                               node_features=node_features,
                               edge_features=edge_features, 
                               min_dfs_code=torch.tensor(d['min_dfs_code']),
                               min_dfs_index=torch.tensor(d['min_dfs_index']),
                               y = labels2idx[d['label']],
                               split = d['split'])
        else:
            return Data(name=name, 
                               edge_index=torch.tensor(d['edge_index']),
                               node_features=node_features,
                               edge_features=edge_features, 
                               y = labels2idx[d['label']],
                               split = d['split'])
        
        